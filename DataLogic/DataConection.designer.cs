#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLogic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="STFDatabase")]
	public partial class DataConectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBarge(Barge instance);
    partial void UpdateBarge(Barge instance);
    partial void DeleteBarge(Barge instance);
    partial void InsertBargeEvent(BargeEvent instance);
    partial void UpdateBargeEvent(BargeEvent instance);
    partial void DeleteBargeEvent(BargeEvent instance);
    partial void InsertBargeload(Bargeload instance);
    partial void UpdateBargeload(Bargeload instance);
    partial void DeleteBargeload(Bargeload instance);
    partial void InsertBargeTravel(BargeTravel instance);
    partial void UpdateBargeTravel(BargeTravel instance);
    partial void DeleteBargeTravel(BargeTravel instance);
    partial void InsertBargeUnload(BargeUnload instance);
    partial void UpdateBargeUnload(BargeUnload instance);
    partial void DeleteBargeUnload(BargeUnload instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertRol(Rol instance);
    partial void UpdateRol(Rol instance);
    partial void DeleteRol(Rol instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataConectionDataContext() : 
				base(global::DataLogic.Properties.Settings.Default.STFDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataConectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Barge> Barges
		{
			get
			{
				return this.GetTable<Barge>();
			}
		}
		
		public System.Data.Linq.Table<BargeEvent> BargeEvents
		{
			get
			{
				return this.GetTable<BargeEvent>();
			}
		}
		
		public System.Data.Linq.Table<Bargeload> Bargeloads
		{
			get
			{
				return this.GetTable<Bargeload>();
			}
		}
		
		public System.Data.Linq.Table<BargeTravel> BargeTravels
		{
			get
			{
				return this.GetTable<BargeTravel>();
			}
		}
		
		public System.Data.Linq.Table<BargeUnload> BargeUnloads
		{
			get
			{
				return this.GetTable<BargeUnload>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Rol> Rols
		{
			get
			{
				return this.GetTable<Rol>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Barge")]
	public partial class Barge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BargeName;
		
		private EntitySet<BargeTravel> _BargeTravels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBargeNameChanging(string value);
    partial void OnBargeNameChanged();
    #endregion
		
		public Barge()
		{
			this._BargeTravels = new EntitySet<BargeTravel>(new Action<BargeTravel>(this.attach_BargeTravels), new Action<BargeTravel>(this.detach_BargeTravels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string BargeName
		{
			get
			{
				return this._BargeName;
			}
			set
			{
				if ((this._BargeName != value))
				{
					this.OnBargeNameChanging(value);
					this.SendPropertyChanging();
					this._BargeName = value;
					this.SendPropertyChanged("BargeName");
					this.OnBargeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barge_BargeTravel", Storage="_BargeTravels", ThisKey="Id", OtherKey="BargeId")]
		public EntitySet<BargeTravel> BargeTravels
		{
			get
			{
				return this._BargeTravels;
			}
			set
			{
				this._BargeTravels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BargeTravels(BargeTravel entity)
		{
			this.SendPropertyChanging();
			entity.Barge = this;
		}
		
		private void detach_BargeTravels(BargeTravel entity)
		{
			this.SendPropertyChanging();
			entity.Barge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BargeEvent")]
	public partial class BargeEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private System.DateTime _EventStart;
		
		private System.Nullable<System.DateTime> _EventEnd;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventStartChanging(System.DateTime value);
    partial void OnEventStartChanged();
    partial void OnEventEndChanging(System.Nullable<System.DateTime> value);
    partial void OnEventEndChanged();
    #endregion
		
		public BargeEvent()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStart", DbType="DateTime NOT NULL")]
		public System.DateTime EventStart
		{
			get
			{
				return this._EventStart;
			}
			set
			{
				if ((this._EventStart != value))
				{
					this.OnEventStartChanging(value);
					this.SendPropertyChanging();
					this._EventStart = value;
					this.SendPropertyChanged("EventStart");
					this.OnEventStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventEnd
		{
			get
			{
				return this._EventEnd;
			}
			set
			{
				if ((this._EventEnd != value))
				{
					this.OnEventEndChanging(value);
					this.SendPropertyChanging();
					this._EventEnd = value;
					this.SendPropertyChanged("EventEnd");
					this.OnEventEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_BargeEvent", Storage="_Event", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.BargeEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.BargeEvents.Add(this);
						this._EventId = value.Id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bargeload")]
	public partial class Bargeload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BargeTravelId;
		
		private System.DateTime _BargeLoadStart;
		
		private System.Nullable<System.DateTime> _BargeLoadFinish;
		
		private EntityRef<BargeTravel> _BargeTravel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBargeTravelIdChanging(int value);
    partial void OnBargeTravelIdChanged();
    partial void OnBargeLoadStartChanging(System.DateTime value);
    partial void OnBargeLoadStartChanged();
    partial void OnBargeLoadFinishChanging(System.Nullable<System.DateTime> value);
    partial void OnBargeLoadFinishChanged();
    #endregion
		
		public Bargeload()
		{
			this._BargeTravel = default(EntityRef<BargeTravel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeTravelId", DbType="Int NOT NULL")]
		public int BargeTravelId
		{
			get
			{
				return this._BargeTravelId;
			}
			set
			{
				if ((this._BargeTravelId != value))
				{
					if (this._BargeTravel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBargeTravelIdChanging(value);
					this.SendPropertyChanging();
					this._BargeTravelId = value;
					this.SendPropertyChanged("BargeTravelId");
					this.OnBargeTravelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeLoadStart", DbType="DateTime NOT NULL")]
		public System.DateTime BargeLoadStart
		{
			get
			{
				return this._BargeLoadStart;
			}
			set
			{
				if ((this._BargeLoadStart != value))
				{
					this.OnBargeLoadStartChanging(value);
					this.SendPropertyChanging();
					this._BargeLoadStart = value;
					this.SendPropertyChanged("BargeLoadStart");
					this.OnBargeLoadStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeLoadFinish", DbType="DateTime")]
		public System.Nullable<System.DateTime> BargeLoadFinish
		{
			get
			{
				return this._BargeLoadFinish;
			}
			set
			{
				if ((this._BargeLoadFinish != value))
				{
					this.OnBargeLoadFinishChanging(value);
					this.SendPropertyChanging();
					this._BargeLoadFinish = value;
					this.SendPropertyChanged("BargeLoadFinish");
					this.OnBargeLoadFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BargeTravel_Bargeload", Storage="_BargeTravel", ThisKey="BargeTravelId", OtherKey="Id", IsForeignKey=true)]
		public BargeTravel BargeTravel
		{
			get
			{
				return this._BargeTravel.Entity;
			}
			set
			{
				BargeTravel previousValue = this._BargeTravel.Entity;
				if (((previousValue != value) 
							|| (this._BargeTravel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BargeTravel.Entity = null;
						previousValue.Bargeloads.Remove(this);
					}
					this._BargeTravel.Entity = value;
					if ((value != null))
					{
						value.Bargeloads.Add(this);
						this._BargeTravelId = value.Id;
					}
					else
					{
						this._BargeTravelId = default(int);
					}
					this.SendPropertyChanged("BargeTravel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BargeTravel")]
	public partial class BargeTravel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _BargeId;
		
		private System.Nullable<int> _TravelNumber;
		
		private EntitySet<Bargeload> _Bargeloads;
		
		private EntitySet<BargeUnload> _BargeUnloads;
		
		private EntityRef<Barge> _Barge;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBargeIdChanging(System.Nullable<int> value);
    partial void OnBargeIdChanged();
    partial void OnTravelNumberChanging(System.Nullable<int> value);
    partial void OnTravelNumberChanged();
    #endregion
		
		public BargeTravel()
		{
			this._Bargeloads = new EntitySet<Bargeload>(new Action<Bargeload>(this.attach_Bargeloads), new Action<Bargeload>(this.detach_Bargeloads));
			this._BargeUnloads = new EntitySet<BargeUnload>(new Action<BargeUnload>(this.attach_BargeUnloads), new Action<BargeUnload>(this.detach_BargeUnloads));
			this._Barge = default(EntityRef<Barge>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeId", DbType="Int")]
		public System.Nullable<int> BargeId
		{
			get
			{
				return this._BargeId;
			}
			set
			{
				if ((this._BargeId != value))
				{
					if (this._Barge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBargeIdChanging(value);
					this.SendPropertyChanging();
					this._BargeId = value;
					this.SendPropertyChanged("BargeId");
					this.OnBargeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelNumber", DbType="Int")]
		public System.Nullable<int> TravelNumber
		{
			get
			{
				return this._TravelNumber;
			}
			set
			{
				if ((this._TravelNumber != value))
				{
					this.OnTravelNumberChanging(value);
					this.SendPropertyChanging();
					this._TravelNumber = value;
					this.SendPropertyChanged("TravelNumber");
					this.OnTravelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BargeTravel_Bargeload", Storage="_Bargeloads", ThisKey="Id", OtherKey="BargeTravelId")]
		public EntitySet<Bargeload> Bargeloads
		{
			get
			{
				return this._Bargeloads;
			}
			set
			{
				this._Bargeloads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BargeTravel_BargeUnload", Storage="_BargeUnloads", ThisKey="Id", OtherKey="BargeTravelId")]
		public EntitySet<BargeUnload> BargeUnloads
		{
			get
			{
				return this._BargeUnloads;
			}
			set
			{
				this._BargeUnloads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barge_BargeTravel", Storage="_Barge", ThisKey="BargeId", OtherKey="Id", IsForeignKey=true)]
		public Barge Barge
		{
			get
			{
				return this._Barge.Entity;
			}
			set
			{
				Barge previousValue = this._Barge.Entity;
				if (((previousValue != value) 
							|| (this._Barge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barge.Entity = null;
						previousValue.BargeTravels.Remove(this);
					}
					this._Barge.Entity = value;
					if ((value != null))
					{
						value.BargeTravels.Add(this);
						this._BargeId = value.Id;
					}
					else
					{
						this._BargeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Barge");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bargeloads(Bargeload entity)
		{
			this.SendPropertyChanging();
			entity.BargeTravel = this;
		}
		
		private void detach_Bargeloads(Bargeload entity)
		{
			this.SendPropertyChanging();
			entity.BargeTravel = null;
		}
		
		private void attach_BargeUnloads(BargeUnload entity)
		{
			this.SendPropertyChanging();
			entity.BargeTravel = this;
		}
		
		private void detach_BargeUnloads(BargeUnload entity)
		{
			this.SendPropertyChanging();
			entity.BargeTravel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BargeUnload")]
	public partial class BargeUnload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BargeTravelId;
		
		private System.DateTime _BargeUnloadStart;
		
		private System.Nullable<System.DateTime> _BargeUnloadFinish;
		
		private EntityRef<BargeTravel> _BargeTravel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBargeTravelIdChanging(int value);
    partial void OnBargeTravelIdChanged();
    partial void OnBargeUnloadStartChanging(System.DateTime value);
    partial void OnBargeUnloadStartChanged();
    partial void OnBargeUnloadFinishChanging(System.Nullable<System.DateTime> value);
    partial void OnBargeUnloadFinishChanged();
    #endregion
		
		public BargeUnload()
		{
			this._BargeTravel = default(EntityRef<BargeTravel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeTravelId", DbType="Int NOT NULL")]
		public int BargeTravelId
		{
			get
			{
				return this._BargeTravelId;
			}
			set
			{
				if ((this._BargeTravelId != value))
				{
					if (this._BargeTravel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBargeTravelIdChanging(value);
					this.SendPropertyChanging();
					this._BargeTravelId = value;
					this.SendPropertyChanged("BargeTravelId");
					this.OnBargeTravelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeUnloadStart", DbType="DateTime NOT NULL")]
		public System.DateTime BargeUnloadStart
		{
			get
			{
				return this._BargeUnloadStart;
			}
			set
			{
				if ((this._BargeUnloadStart != value))
				{
					this.OnBargeUnloadStartChanging(value);
					this.SendPropertyChanging();
					this._BargeUnloadStart = value;
					this.SendPropertyChanged("BargeUnloadStart");
					this.OnBargeUnloadStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BargeUnloadFinish", DbType="DateTime")]
		public System.Nullable<System.DateTime> BargeUnloadFinish
		{
			get
			{
				return this._BargeUnloadFinish;
			}
			set
			{
				if ((this._BargeUnloadFinish != value))
				{
					this.OnBargeUnloadFinishChanging(value);
					this.SendPropertyChanging();
					this._BargeUnloadFinish = value;
					this.SendPropertyChanged("BargeUnloadFinish");
					this.OnBargeUnloadFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BargeTravel_BargeUnload", Storage="_BargeTravel", ThisKey="BargeTravelId", OtherKey="Id", IsForeignKey=true)]
		public BargeTravel BargeTravel
		{
			get
			{
				return this._BargeTravel.Entity;
			}
			set
			{
				BargeTravel previousValue = this._BargeTravel.Entity;
				if (((previousValue != value) 
							|| (this._BargeTravel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BargeTravel.Entity = null;
						previousValue.BargeUnloads.Remove(this);
					}
					this._BargeTravel.Entity = value;
					if ((value != null))
					{
						value.BargeUnloads.Add(this);
						this._BargeTravelId = value.Id;
					}
					else
					{
						this._BargeTravelId = default(int);
					}
					this.SendPropertyChanged("BargeTravel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EventDescription;
		
		private int _EventTypeId;
		
		private System.Nullable<bool> _AffectBarge;
		
		private System.Nullable<bool> _AfectChippingTable;
		
		private EntitySet<BargeEvent> _BargeEvents;
		
		private EntityRef<EventType> _EventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventDescriptionChanging(string value);
    partial void OnEventDescriptionChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnAffectBargeChanging(System.Nullable<bool> value);
    partial void OnAffectBargeChanged();
    partial void OnAfectChippingTableChanging(System.Nullable<bool> value);
    partial void OnAfectChippingTableChanged();
    #endregion
		
		public Event()
		{
			this._BargeEvents = new EntitySet<BargeEvent>(new Action<BargeEvent>(this.attach_BargeEvents), new Action<BargeEvent>(this.detach_BargeEvents));
			this._EventType = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDescription", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string EventDescription
		{
			get
			{
				return this._EventDescription;
			}
			set
			{
				if ((this._EventDescription != value))
				{
					this.OnEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EventDescription = value;
					this.SendPropertyChanged("EventDescription");
					this.OnEventDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NOT NULL")]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectBarge", DbType="Bit")]
		public System.Nullable<bool> AffectBarge
		{
			get
			{
				return this._AffectBarge;
			}
			set
			{
				if ((this._AffectBarge != value))
				{
					this.OnAffectBargeChanging(value);
					this.SendPropertyChanging();
					this._AffectBarge = value;
					this.SendPropertyChanged("AffectBarge");
					this.OnAffectBargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AfectChippingTable", DbType="Bit")]
		public System.Nullable<bool> AfectChippingTable
		{
			get
			{
				return this._AfectChippingTable;
			}
			set
			{
				if ((this._AfectChippingTable != value))
				{
					this.OnAfectChippingTableChanging(value);
					this.SendPropertyChanging();
					this._AfectChippingTable = value;
					this.SendPropertyChanged("AfectChippingTable");
					this.OnAfectChippingTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_BargeEvent", Storage="_BargeEvents", ThisKey="Id", OtherKey="EventId")]
		public EntitySet<BargeEvent> BargeEvents
		{
			get
			{
				return this._BargeEvents;
			}
			set
			{
				this._BargeEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="EventTypeId", OtherKey="Id", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EventTypeId = value.Id;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BargeEvents(BargeEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_BargeEvents(BargeEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTypes")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EventTypeDescription;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventTypeDescriptionChanging(string value);
    partial void OnEventTypeDescriptionChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeDescription", DbType="NChar(50)")]
		public string EventTypeDescription
		{
			get
			{
				return this._EventTypeDescription;
			}
			set
			{
				if ((this._EventTypeDescription != value))
				{
					this.OnEventTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EventTypeDescription = value;
					this.SendPropertyChanged("EventTypeDescription");
					this.OnEventTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="Id", OtherKey="EventTypeId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rol")]
	public partial class Rol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RolName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRolNameChanging(string value);
    partial void OnRolNameChanged();
    #endregion
		
		public Rol()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string RolName
		{
			get
			{
				return this._RolName;
			}
			set
			{
				if ((this._RolName != value))
				{
					this.OnRolNameChanging(value);
					this.SendPropertyChanging();
					this._RolName = value;
					this.SendPropertyChanged("RolName");
					this.OnRolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_User", Storage="_Users", ThisKey="Id", OtherKey="RolId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Rol = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Rol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Name;
		
		private string _Surname;
		
		private System.Nullable<int> _RolId;
		
		private EntityRef<Rol> _Rol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnRolIdChanging(System.Nullable<int> value);
    partial void OnRolIdChanged();
    #endregion
		
		public User()
		{
			this._Rol = default(EntityRef<Rol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolId", DbType="Int")]
		public System.Nullable<int> RolId
		{
			get
			{
				return this._RolId;
			}
			set
			{
				if ((this._RolId != value))
				{
					if (this._Rol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRolIdChanging(value);
					this.SendPropertyChanging();
					this._RolId = value;
					this.SendPropertyChanged("RolId");
					this.OnRolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rol_User", Storage="_Rol", ThisKey="RolId", OtherKey="Id", IsForeignKey=true)]
		public Rol Rol
		{
			get
			{
				return this._Rol.Entity;
			}
			set
			{
				Rol previousValue = this._Rol.Entity;
				if (((previousValue != value) 
							|| (this._Rol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rol.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Rol.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RolId = value.Id;
					}
					else
					{
						this._RolId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
